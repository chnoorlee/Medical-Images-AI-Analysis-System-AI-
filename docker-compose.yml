version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: medical-ai-postgres
    environment:
      POSTGRES_DB: medical_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - medical-ai-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: medical-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - medical-ai-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: medical-ai-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - medical-ai-network
    restart: unless-stopped
    command: server /data --console-address ":9001"

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: medical-ai-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - medical-ai-network
    restart: unless-stopped

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-base
    container_name: medical-ai-backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/medical_ai
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - medical-ai-network
    depends_on:
      - postgres
      - redis
      - minio
      - rabbitmq
    restart: unless-stopped
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-base
    container_name: medical-ai-celery-worker
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/medical_ai
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app/backend
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - medical-ai-network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: unless-stopped
    command: celery -A backend.celery_app worker --loglevel=info

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-base
    container_name: medical-ai-celery-beat
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/medical_ai
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672/
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
    networks:
      - medical-ai-network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: unless-stopped
    command: celery -A backend.celery_app beat --loglevel=info

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: medical-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/dist:/usr/share/nginx/html
    networks:
      - medical-ai-network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  rabbitmq_data:

networks:
  medical-ai-network:
    driver: bridge