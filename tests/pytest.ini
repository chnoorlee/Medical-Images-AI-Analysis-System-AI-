[tool:pytest]
# Pytest 配置文件
# 医疗AI系统测试配置

# 测试发现
minversion = 6.0
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# 输出配置
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --showlocals
    --durations=10
    --cov=src
    --cov-report=html:tests/reports/coverage
    --cov-report=xml:tests/reports/coverage.xml
    --cov-report=term-missing
    --cov-fail-under=80
    --junitxml=tests/reports/junit.xml
    --html=tests/reports/report.html
    --self-contained-html

# 标记定义
markers =
    unit: 单元测试
    integration: 集成测试
    e2e: 端到端测试
    performance: 性能测试
    benchmark: 基准测试
    slow: 慢速测试（运行时间 > 5秒）
    fast: 快速测试（运行时间 < 1秒）
    api: API测试
    database: 数据库测试
    ai: AI模型测试
    security: 安全测试
    smoke: 冒烟测试
    regression: 回归测试
    load: 负载测试
    stress: 压力测试
    memory: 内存测试
    network: 网络测试
    file: 文件操作测试
    cache: 缓存测试
    auth: 认证测试
    permission: 权限测试
    validation: 数据验证测试
    workflow: 工作流测试
    notification: 通知测试
    report: 报告测试
    backup: 备份测试
    recovery: 恢复测试
    monitoring: 监控测试
    logging: 日志测试
    config: 配置测试
    deployment: 部署测试
    upgrade: 升级测试
    compatibility: 兼容性测试
    accessibility: 可访问性测试
    usability: 可用性测试
    localization: 本地化测试
    cross_platform: 跨平台测试
    browser: 浏览器测试
    mobile: 移动端测试
    tablet: 平板测试
    desktop: 桌面测试
    cloud: 云环境测试
    docker: Docker测试
    kubernetes: Kubernetes测试
    production: 生产环境测试
    staging: 预发布环境测试
    development: 开发环境测试
    local: 本地环境测试

# 过滤警告
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*coroutine.*:RuntimeWarning
    error::sqlalchemy.exc.SAWarning

# 异步测试配置
asyncio_mode = auto

# 日志配置
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# 测试数据目录
tmp_path_retention_count = 3
tmp_path_retention_policy = failed

# 并行测试配置（需要 pytest-xdist）
# addopts = -n auto

# 超时配置（需要 pytest-timeout）
timeout = 300
timeout_method = thread

# 重试配置（需要 pytest-rerunfailures）
# addopts = --reruns 2 --reruns-delay 1

# 随机测试顺序（需要 pytest-randomly）
# addopts = --randomly-seed=1234

# 内存使用监控（需要 pytest-monitor）
# addopts = --monitor

# 基准测试配置（需要 pytest-benchmark）
# addopts = --benchmark-only --benchmark-sort=mean

# 覆盖率配置
[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */env/*
    */__pycache__/*
    */migrations/*
    */settings/*
    */manage.py
    */wsgi.py
    */asgi.py
    */conftest.py
    */setup.py
    */setup.cfg
    */.tox/*
    */build/*
    */dist/*
    */docs/*
    */scripts/*
    */tools/*
    */examples/*
    */demo/*
    */temp/*
    */tmp/*
    */.pytest_cache/*
    */.coverage
    */htmlcov/*
    */node_modules/*
    */static/*
    */media/*
    */locale/*
    */fixtures/*
    */factories.py
    */mock_*.py
    */test_*.py
    */*_test.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    if settings.DEBUG
    pass
    ...
    @abstract
    @abstractmethod
    @abstractproperty
    @abstractclassmethod
    @abstractstaticmethod
    class .*\(Protocol\):
    class .*\(TypedDict\):
    # pragma: no cover
    # nocov
    # noqa

ignore_errors = True
show_missing = True
skip_covered = False
skip_empty = True
sort = Cover
precision = 2

[coverage:html]
directory = tests/reports/coverage
title = Medical AI System Coverage Report

[coverage:xml]
output = tests/reports/coverage.xml